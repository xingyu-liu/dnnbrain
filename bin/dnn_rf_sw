#! /usr/bin/env python

"""
Estimate receptive field using slide-window(sw) occulding method 
for interested channels. The method work for both conv and fc layers
"""

import numpy as np
import os, cv2, argparse
from os.path import exists as pexist
from os.path import join as pjoin
from matplotlib import pyplot as plt
from dnnbrain.dnn.core import Stimulus
from dnnbrain.dnn import models as db_models # Use eval to import DNN model
from dnnbrain.dnn.algo import OccluderDiscrepancyMapping


def main():
    
    parser = argparse.ArgumentParser(description='Estimate receptive field for '
                                     'interested channels using its top stimuli')
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar='Name of target DNN',
                        choices=['AlexNet','vgg11','vgg16','vgg19'],
                        help = 'Name of interested DNN')
    parser.add_argument('-layer',
                        type=str,
                        required=True,
                        metavar='layer of top stimulus',
                        help='Layers of interest. '
                             'conv, relu, pool, fc represents convolution, reLU, '
                             'pooling, and fc layer, respectively.The top stimulis '
                             'are selected for all layers and channels default.')
    parser.add_argument('-chn',
                        type=int,
                        required=True,
                        metavar='channel of top stimulus',
                        help='Channel of interest.If no channels are specificied, '
                        'each channel will be processed. The layer and channel '
                        'should be paired together.')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='A csv file lists top stimuli to be used to '
                        'estimate receptive field.',
                        help='The file provide path of the top stimuli images '
                        'used to estimate receptive field.')
    parser.add_argument('-wsize',
                        type=int,
                        nargs=2,
                        metavar='Window size',
                        required=True,
                        help='Windows size in pixel unit. default is 11x11')
    parser.add_argument('-stride',
                        type=int,
                        nargs=2,
                        metavar='Stride in moving window',
                        required=True,
                        help='Stride used in moving windows. default is 2x2')
    parser.add_argument('-metric',
                        type=str,
                        metavar='Metric of discrpancy',
                        required=True,
                        choices=['max','mean','L1','L2'],
                        help='Discripancy metric to measure the differnce between '
                        'original activation and activation from occulding.')
    parser.add_argument('-out',
                        type = str,
                        required = True,
                        metavar='Outputdir',
                        help = 'Output directory to save RF images.')
    
    args = parser.parse_args()
    
    #Load net/stim
    dnn = eval('db_models.{}()'.format(args.net))
    stimuli = Stimulus()
    stimuli.load(args.stim)
    
    # Create output file if inexistent
    if not pexist(args.out):
        os.mkdir(args.out)
        
    #Prepare the upsampling calss
    oc_estimator = OccluderDiscrepancyMapping(dnn, args.layer, args.chn)
    oc_estimator.set_params(window=args.wsize, stride=args.stride, metric=args.metric)

    #Compute maps
    for img_id in stimuli.get('stimID'):
        current_pic_path = pjoin(stimuli.header['path'], img_id)
        current_pic = cv2.imread(current_pic_path)
        oc_activation_maps =  oc_estimator.compute(current_pic)

        #Save out
        plt.imsave(pjoin(args.out, 'rf_sw_' + args.layer + '_chn' + str(args.chn) + '_' + img_id),
                   oc_activation_maps, cmap='gray')

    
if __name__ == '__main__':
    main()
