#! /usr/bin/env python
import os
import argparse
import time
from os.path import exists as pexist
from os.path import join as pjoin
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from dnnbrain.dnn.core import Stimulus
from dnnbrain.dnn import models as db_models
from dnnbrain.dnn.algo import MinimalParcelImage

"""
Simplify a stimulus into a minimal part which could cause equivalent activation
as the raw stimlus in intereseted channels
"""

def main():
    parser = argparse.ArgumentParser(description='Simplify a stimulus into ' 
                                     'a minimal part which could cause equivalent '
                                     'activation as the original stimlus '
                                     'in intereseted channels')
    parser.add_argument('-net',
                        type = str,
                        required = True,
                        metavar='Name of target DNN',
                        choices=['AlexNet','vgg11','vgg16','vgg19'],
                        help = 'Name of interested DNN')
    parser.add_argument('-stim',
                        type=str,
                        required=True,
                        metavar='A csv file lists top stimuli to be simplyfied.',
                        help='The file provide path of the top stimuli images '
                        'to be simplified.')
    parser.add_argument('-layer',
                        metavar='layer of top stimulus',
                        required=True,
                        type=str,
                        help='Layer which the stimulus activation is max')
    parser.add_argument('-chn',
                        metavar='channel of top stimulus',
                        required=True,
                        type=int,
                        help='The channel of layer which you focus on')
    parser.add_argument('-out',
                        type = str,
                        required = True,
                        metavar='Outputdir',
                        help = 'Output directory to save the simplfied image, ' 
                        'and associated act.hd5 activation file.')   
    args = parser.parse_args()
    
    # Load net/stim
    dnn = eval('db_models.{}()'.format(args.net))
    stim = Stimulus()
    stim.load(args.stim)

    # Create output file if inexistent
    if not pexist(args.out):
        os.mkdir(args.out)
        
    # Create the minimal image class
    minimal_image = MinimalParcelImage(dnn, args.layer, args.chn)
    
    for img_id in stim.get('stimID'):
        #load image
        image = Image.open(pjoin(stim.header['path'], img_id)).convert('RGB')
        image = np.asarray(image)
        #decompose image
        minimal_image.felzenszwalb_decompose(image) 
        # generate the minimal image
        image_min = minimal_image.generate_minimal_image()
        # save the minimal image
        plt.imsave(pjoin(args.out, 'mi_'+str(args.layer)+'_chn'+str(args.chn)+'_'+str(img_id)),image_min)
        plt.axis('off')
    
if __name__ == '__main__':
    time_start = time.time()
    main()
    time_end = time.time()
    print("Completed all!time cost: %.4f s" % (time_end - time_start))